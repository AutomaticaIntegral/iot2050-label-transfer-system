/**
 * Servidor TCP para comunicación con PLC
 * Cliente: Adisseo
 * Proyecto: TCP Label Transfer
 */

const net = require('net');
const { log } = require('../utils/logger');
const { updateCounterInZpl } = require('../utils/zpl-utils');
const { printToProductPrinter, printToRfidPrinter } = require('../services/printer-service');
const { 
  getLastLabelInfo, 
  getLastRfidLabelInfo,
  getCurrentCounter, 
  getCurrentRfidCounter,
  incrementSystemCounter, 
  incrementRfidSystemCounter,
  generateCurrentGs1,
  generateCurrentRfidGs1
} = require('../services/label-service');
const config = require('../config');
const fs = require('fs');

// Mapa para conexiones activas
const activeConnections = new Map();
let nextConnectionId = 1;

// Array para almacenar messageIds procesados y evitar duplicados
const processedMessageIds = [];
const MAX_MESSAGE_IDS = 200; // Límite máximo de messageIds almacenados

// Función para registrar messageIds en el log para debugging
function logMessageIdStatus(messageId, isDuplicate) {
  const logMessage = `MessageID: ${messageId}, Duplicado: ${isDuplicate ? 'SI' : 'NO'}`;
  log(logMessage, 'PLC', isDuplicate ? 'warn' : 'info');
  
  // También guardar en un archivo para análisis posterior
  const logLine = `${new Date().toISOString()} - ${logMessage}\n`;
  // Usar la carpeta 'data' que ya existe en el proyecto
  const logFilePath = './data/messageid_FORCE.txt';
  fs.appendFile(logFilePath, logLine, (err) => {
    if (err) {
      log(`Error al escribir en archivo de log: ${err.message}`, 'PLC', 'error');
    }
  });
}

// Función para verificar si un messageId ya ha sido procesado
function isDuplicateMessageId(messageId) {
  // Convertir a string para asegurar comparación consistente
  const messageIdStr = String(messageId);
  return processedMessageIds.includes(messageIdStr);
}

// Función para registrar un nuevo messageId
function registerMessageId(messageId) {
  // Convertir a string para almacenamiento consistente
  const messageIdStr = String(messageId);
  
  // Evitar duplicados en el array
  if (!processedMessageIds.includes(messageIdStr)) {
    // Agregar el nuevo messageId al inicio del array
    processedMessageIds.unshift(messageIdStr);
    
    // Limitar el tamaño del array
    if (processedMessageIds.length > MAX_MESSAGE_IDS) {
      processedMessageIds.pop(); // Eliminar el más antiguo
    }
  }
}

// Utilizaremos el bus de eventos global para la comunicación entre servidores
// Este enfoque evita las referencias circulares y hace que los módulos sean realmente independientes

// Crear servidor TCP para comandos del PLC
const tcpServer = net.createServer((socket) => {
  const connectionId = nextConnectionId++;
  activeConnections.set(connectionId, socket);
  log(`Nueva conexión PLC desde ${socket.remoteAddress}:${socket.remotePort} (ID: ${connectionId})`, 'PLC');
  
  socket.on('data', (data) => {
    try {
      const commandData = data.toString();
      
      // Mostrar datos raw recibidos
      log('\n--- INICIO DATOS RAW RECIBIDOS DE PLC ---', 'PLC');
      log(commandData, 'PLC');
      log('--- FIN DATOS RAW RECIBIDOS DE PLC ---\n', 'PLC');
      
      // Limpiar caracteres adicionales (como '#' al final)
      const cleanData = commandData.replace(/#$/, '');
      const command = JSON.parse(cleanData);
      
      // Procesar según el tipo de comando
      const messageId = command.messageId || 125;
      const cmdReceived = command.cmd.toString();
      
      // Notificar al servidor ADI sobre el comando recibido a través del bus de eventos
      log(`Emitiendo evento plcCommand: ${cmdReceived}`, 'PLC');
      global.eventBus.emit('plcCommand', cmdReceived);
      
      // Agregar un pequeño retraso para asegurar que el evento general se procese primero
      setTimeout(() => {
        // Emitir evento específico para este comando
        log(`Emitiendo evento específico para comando ${cmdReceived}`, 'PLC');
        global.eventBus.emit(`plcCommand_${cmdReceived}`, command);
      }, 100);
      
      // Manejar diferentes tipos de comandos
      if (command.cmd === 10) {
        // Comando 10: Impresión estándar
        handlePrintCommand(socket, command, messageId);
      } 
      else if (command.cmd === 11) {
        // Comando 11: Impresión RFID
        handleRfidPrintCommand(socket, command, messageId);
      }
      else if (command.cmd === 40) {
        // Comando 40: Consulta o actualización del contador
        handleCounterCommand(socket, command, messageId);
      } 
      else if (command.cmd === 80) {
        // Comando 80: Consulta de última etiqueta
        handleLastLabelCommand(socket, command, messageId);
      } 
      else {
        // Comando no soportado en esta versión simplificada
        log(`Comando ${command.cmd} no soportado en esta versión simplificada`, 'PLC');
        socket.write(JSON.stringify({
          status: 'success', // Respondemos success para no bloquear al PLC
          code: 'COMMAND_SIMULATED',
          messageId: messageId,
          message: `Comando ${command.cmd} simulado correctamente`
        }) + '#');
      }
    } catch (error) {
      log(`Error al procesar comando: ${error.message}`, 'PLC', 'error');
      try {
        socket.write(JSON.stringify({
          status: 'error',
          code: 'COMMAND_PROCESSING_ERROR',
          message: 'Error al procesar comando',
          details: error.message
        }) + '#');
      } catch (writeError) {
        log(`Error al enviar respuesta de error: ${writeError.message}`, 'PLC', 'error');
      }
    }
  });
  
  socket.on('error', (err) => {
    log(`Error en conexión: ${err.message}`, 'PLC', 'error');
  });
  
  socket.on('close', () => {
    log('Conexión cerrada', 'PLC');
    // Eliminar conexión del mapa de conexiones activas
    activeConnections.delete(connectionId);
    log(`Conexión ${connectionId} eliminada del registro`, 'PLC');
  });
});

/**
 * Maneja el comando de impresión (cmd 10)
 * @param {net.Socket} socket - Socket de conexión
 * @param {Object} command - Comando recibido
 * @param {number} messageId - ID del mensaje
 */
function handlePrintCommand(socket, command, messageId) {
  log('⚙️ Procesando comando de impresión estándar', 'PLC', 'success');
  
  // Verificar si el messageId es un duplicado
  const isDuplicate = isDuplicateMessageId(messageId);
  logMessageIdStatus(messageId, isDuplicate);
  
  // Si no es duplicado, registrarlo para futuras comprobaciones
  if (!isDuplicate) {
    registerMessageId(messageId);
  }
  
  // ✅ LÓGICA CORREGIDA: CMD 10 usa SOLO etiquetas NORMALES
  const lastNormalLabel = getLastLabelInfo();
  
  // Usar SOLAMENTE la última etiqueta NORMAL para CMD 10
  let labelToUse = lastNormalLabel;
  let isRfidLabel = false;
  
  if (lastNormalLabel) {
    log('[PLC] 📄 CMD 10: Usando última etiqueta NORMAL', 'PLC', 'info');
  } else {
    log('[PLC] ⚠️ CMD 10: No hay etiquetas NORMALES disponibles', 'PLC', 'warn');
  }
  
  if (labelToUse) {
    const labelType = 'NORMAL';
    log(`[PLC] ✅ CMD 10: Procesando impresión de etiqueta ${labelType}...`, 'PLC', 'success');
    
    // ✅ INCREMENTAR CONTADOR NORMAL
    let newCounter;
    let currentCounterValue;
    let printerTarget;
    
    // Para etiquetas NORMALES solamente
    currentCounterValue = getCurrentCounter();
    printerTarget = 'PRODUCTO';
    
    if (isDuplicate) {
      newCounter = currentCounterValue; // No incrementar si es duplicado
      log(`[PLC] 📄 MessageID ${messageId} duplicado, manteniendo contador NORMAL: ${newCounter}`, 'PLC', 'warn');
    } else {
      newCounter = incrementSystemCounter(); // Incrementar contador normal
      log(`[PLC] 📄 Nuevo MessageID ${messageId}, contador NORMAL incrementado: ${currentCounterValue} → ${newCounter}`, 'PLC', 'success');
    }
    
    // IMPORTANTE: Enviar exactamente la misma etiqueta ZPL que llegó del ERP
    const originalZplCommand = labelToUse.zpl || '';
    
    if (originalZplCommand) {
      log(`[PLC] 🖨️ Enviando a impresora ${printerTarget} con contador ${newCounter}`, 'PLC', 'success');
      
      // Reemplazar el contador en el ZPL original con el contador actual
      // Esto mantiene el formato original pero usa el contador correcto
      const updatedZpl = updateCounterInZpl(originalZplCommand, newCounter);
      
      // Enviar a impresora de producto (principal) - Siempre imprimimos, sea duplicado o no
      printToProductPrinter(updatedZpl)
        .then(() => {
          
          // Obtener el número de copias desde la etiqueta
          const copies = labelToUse.copies || 1;
          
          // Obtener el serial de la etiqueta (lo mismo que el contador de la etiqueta, no el incrementado)
          const serial = labelToUse.counter || '0001';
          
          // Generar GS1 para etiqueta NORMAL
          const gs1 = generateCurrentGs1();
          
          // Responder al PLC con el nuevo formato, incluyendo flag de duplicado
          socket.write(JSON.stringify({
            status: 'success',
            code: isDuplicate ? 'DUPLICATE_MESSAGEID' : 'PRINT_OK',
            messageId: messageId,
            labelType: 'NORMAL',
            gs1: labelToUse.gs1 || gs1,
            serial: serial,
            currentCounter: newCounter,
            copies: copies,
            printerTarget: printerTarget,
            isDuplicate: isDuplicate
          }) + '#');
          
          if (isDuplicate) {
            log(`[PLC] 🔄 Etiqueta ${labelType} con MessageID ${messageId} procesada como duplicada, contador mantenido en ${newCounter}`, 'PLC', 'warn');
          } else {
            log(`[PLC] ✅ Etiqueta ${labelType} con MessageID ${messageId} impresa correctamente, contador incrementado a: ${newCounter}`, 'PLC', 'success');
          }
        })
        .catch(error => {
          log(`Error al imprimir: ${error.message}`, 'PLC', 'error');
          socket.write(JSON.stringify({
            status: 'error',
            code: 'PRINT_ERROR',
            messageId: messageId,
            error: error.message,
            isDuplicate: isDuplicate
          }) + '#');
        });
    } else {
      // Si no hay ZPL original (caso improbable), usar fallback
      log('[PLC] No se encontró ZPL original, usando respuesta genérica', 'PLC', 'warn');
      
      socket.write(JSON.stringify({
        status: 'error',
        code: 'MISSING_ZPL',
        messageId: messageId,
        message: 'No se encontró contenido ZPL para la etiqueta',
        labelType: 'NORMAL',
        isDuplicate: isDuplicate
      }) + '#');
    }
  } else {
    log('[PLC] No hay etiqueta pendiente del ERP', 'PLC', 'warn');
    
    socket.write(JSON.stringify({
      status: 'warning',
      code: 'NO_LABEL_INFO',
      messageId: messageId,
      message: 'No hay información de etiqueta disponible',
      labelType: 'UNKNOWN',
      isDuplicate: isDuplicate
    }) + '#');
  }
}

/**
 * Maneja el comando de impresión RFID (cmd 11)
 * @param {net.Socket} socket - Socket de conexión
 * @param {Object} command - Comando recibido
 * @param {number} messageId - ID del mensaje
 */
function handleRfidPrintCommand(socket, command, messageId) {
  log('⚙️ Procesando comando de impresión RFID', 'PLC', 'success');
  
  // Verificar si el messageId es un duplicado
  const isDuplicate = isDuplicateMessageId(messageId);
  logMessageIdStatus(messageId, isDuplicate);
  
  // Si no es duplicado, registrarlo para futuras comprobaciones
  if (!isDuplicate) {
    registerMessageId(messageId);
  }
  
  // 🆕 NUEVA LÓGICA: Detectar tipo de etiqueta y usar el contador correspondiente
  const lastRfidLabel = getLastRfidLabelInfo();
  
  if (lastRfidLabel) {
    const labelType = 'RFID';
    log(`[PLC] ✅ Procesando impresión de etiqueta ${labelType}...`, 'PLC', 'success');
    
    // 🆕 INCREMENTAR CONTADOR CORRESPONDIENTE
    let newCounter;
    let currentCounterValue;
    let printerTarget;
    
    currentCounterValue = getCurrentRfidCounter();
    printerTarget = 'RFID';
    
    if (isDuplicate) {
      newCounter = currentCounterValue; // No incrementar si es duplicado
      log(`[PLC] 🏷️ MessageID ${messageId} duplicado, manteniendo contador RFID: ${newCounter}`, 'PLC', 'warn');
    } else {
      newCounter = incrementRfidSystemCounter(); // Incrementar contador RFID
      log(`[PLC] 🏷️ Nuevo MessageID ${messageId}, contador RFID incrementado: ${currentCounterValue} → ${newCounter}`, 'PLC', 'success');
    }
    
    // IMPORTANTE: Enviar exactamente la misma etiqueta ZPL que llegó del ERP
    const originalZplCommand = lastRfidLabel.zpl || '';
    
    if (originalZplCommand) {
      log(`[PLC] 🖨️ Enviando a impresora ${printerTarget} con contador ${newCounter}`, 'PLC', 'success');
      
      // Reemplazar el contador en el ZPL original con el contador actual
      // Esto mantiene el formato original pero usa el contador correcto
      const updatedZpl = updateCounterInZpl(originalZplCommand, newCounter);
      
      // Enviar a impresora RFID - Siempre imprimimos, sea duplicado o no
      printToRfidPrinter(updatedZpl)
        .then(() => {
          
          // Obtener el número de copias desde la etiqueta
          const copies = lastRfidLabel.copies || 1;
          
          // Obtener el serial de la etiqueta (lo mismo que el contador de la etiqueta, no el incrementado)
          const serial = lastRfidLabel.counter || '0001';
          
          // Generar GS1 según el tipo de etiqueta
          const gs1 = generateCurrentRfidGs1();
          
          // Responder al PLC con el nuevo formato, incluyendo flag de duplicado
          socket.write(JSON.stringify({
            status: 'success',
            code: isDuplicate ? 'DUPLICATE_MESSAGEID' : 'PRINT_OK',
            messageId: messageId,
            labelType: labelType,
            gs1: lastRfidLabel.gs1 || gs1,
            serial: serial,
            currentCounter: newCounter,
            copies: copies,
            printerTarget: printerTarget,
            isDuplicate: isDuplicate
          }) + '#');
          
          if (isDuplicate) {
            log(`[PLC] 🔄 Etiqueta ${labelType} con MessageID ${messageId} procesada como duplicada, contador mantenido en ${newCounter}`, 'PLC', 'warn');
          } else {
            log(`[PLC] ✅ Etiqueta ${labelType} con MessageID ${messageId} impresa correctamente, contador incrementado a: ${newCounter}`, 'PLC', 'success');
          }
        })
        .catch(error => {
          log(`Error al imprimir: ${error.message}`, 'PLC', 'error');
          socket.write(JSON.stringify({
            status: 'error',
            code: 'PRINT_ERROR',
            messageId: messageId,
            error: error.message,
            isDuplicate: isDuplicate
          }) + '#');
        });
    } else {
      // Si no hay ZPL original (caso improbable), usar fallback
      log('[PLC] No se encontró ZPL original, usando respuesta genérica', 'PLC', 'warn');
      
      socket.write(JSON.stringify({
        status: 'error',
        code: 'MISSING_ZPL',
        messageId: messageId,
        message: 'No se encontró contenido ZPL para la etiqueta',
        labelType: labelType,
        isDuplicate: isDuplicate
      }) + '#');
    }
  } else {
    log('[PLC] No hay etiqueta pendiente del ERP', 'PLC', 'warn');
    
    socket.write(JSON.stringify({
      status: 'warning',
      code: 'NO_LABEL_INFO',
      messageId: messageId,
      message: 'No hay información de etiqueta disponible',
      labelType: 'UNKNOWN',
      isDuplicate: isDuplicate
    }) + '#');
  }
}

/**
 * Maneja el comando de consulta o actualización del contador (cmd 40)
 * @param {net.Socket} socket - Socket de conexión
 * @param {Object} command - Comando recibido
 * @param {number} messageId - ID del mensaje
 */
function handleCounterCommand(socket, command, messageId) {
  if (command.data && command.data.setCounter) {
    log(`[PLC] Solicitud de actualización de contador a: ${command.data.setCounter}`, 'PLC');
    
    // CORRIGIENDO: Por ahora solo consultamos el contador, no lo modificamos automáticamente
    // El contador se debe manejar desde el flujo normal de etiquetas
    log(`[PLC] ADVERTENCIA: Comando 40 con setCounter no implementado para evitar conflictos`, 'PLC', 'warn');
    
    // Responder con el contador actual
    socket.write(JSON.stringify({
      status: 'success',
      code: 'COUNTER_CURRENT', // Cambio de código para indicar que solo consultamos
      messageId: messageId,
      counter: getCurrentCounter(),
      note: 'Contador no modificado - se gestiona automáticamente con etiquetas'
    }) + '#');
  } else {
    log('[PLC] Consultando contador actual', 'PLC');
    
    // Responder con el contador actual (sin incrementar)
    socket.write(JSON.stringify({
      status: 'success',
      code: 'COUNTER_VALUE',
      messageId: messageId,
      counter: getCurrentCounter()
    }) + '#');
  }
}

/**
 * Maneja el comando de consulta de última etiqueta (cmd 80)
 * @param {net.Socket} socket - Socket de conexión
 * @param {Object} command - Comando recibido
 * @param {number} messageId - ID del mensaje
 * @returns {boolean} Indica si el comando es el esperado para ADI
 */
function handleLastLabelCommand(socket, command, messageId) {
  const cmdReceived = command.cmd.toString();
  log(`[PLC] Procesando comando ${cmdReceived} (consulta de última etiqueta)`, 'PLC');
  
  // Emitir un evento específico para el comando 80 para asegurar que ADI lo procese
  if (global.eventBus) {
    log(`Emitiendo evento específico para comando 80`, 'PLC');
    global.eventBus.emit('plcCommand', '80');
  }
  
  const lastLabelInfo = getLastLabelInfo();
  const currentCounter = getCurrentCounter();
  
  // Respuesta al PLC
  if (lastLabelInfo) {
    // Responder con la información de la última etiqueta
    log(`[PLC] Devolviendo información de última etiqueta: ${lastLabelInfo.gs1}`, 'PLC');
    
    // Formato exacto que espera el PLC en producción
    socket.write(JSON.stringify({
      status: 'success',
      code: 'LAST_LABEL_INFO',
      messageId: messageId,
      gs1: lastLabelInfo.gs1,
      serial: lastLabelInfo.counter,
      currentCounter: currentCounter,
      copies: lastLabelInfo.copies || 1
    }) + '#');
  } else {
    // No hay información de etiqueta disponible pero aún así devolvemos
    // una estructura de respuesta válida con datos predeterminados
    log('[PLC] No hay información de etiqueta guardada, usando valores predeterminados', 'PLC', 'warn');
    
    // Generar un código GS1 predeterminado con el contador actual
    const defaultGs1 = generateCurrentGs1();
    const defaultSerial = '0001'; // Valor predeterminado para el serial
    
    socket.write(JSON.stringify({
      status: 'success', // Cambiado de 'warning' a 'success'
      code: 'LAST_LABEL_INFO',
      messageId: messageId,
      gs1: defaultGs1,
      serial: defaultSerial,
      currentCounter: currentCounter,
      copies: 1
    }) + '#');
    
    log(`[PLC] Devolviendo información predeterminada: ${defaultGs1}`, 'PLC');
  }
  
  // Retornar true para indicar que este es el comando 80
  return cmdReceived === '80';
}

/**
 * Inicia el servidor PLC
 * @returns {Promise<net.Server>} Promise que se resuelve con el servidor iniciado
 */
function startPlcServer() {
  return new Promise((resolve, reject) => {
    tcpServer.listen(config.PLC_PORT, '0.0.0.0', () => {
      log(`Servidor PLC escuchando en puerto ${config.PLC_PORT}`, 'PLC', 'success');
      log(`Simulando dispositivo IOT2050 con IP ${config.IOT_IP}`, 'PLC');
      resolve(tcpServer);
    }).on('error', (err) => {
      log(`Error al iniciar servidor PLC: ${err.message}`, 'PLC', 'error');
      reject(err);
    });
  });
}

/**
 * Detiene el servidor PLC
 * @returns {Promise<void>} Promise que se resuelve cuando el servidor está detenido
 */
function stopPlcServer() {
  return new Promise((resolve) => {
    if (tcpServer.listening) {
      tcpServer.close(() => {
        log('Servidor PLC detenido', 'PLC');
        resolve();
      });
    } else {
      resolve();
    }
  });
}

/**
 * Obtiene información sobre el comando esperado para responder a ADI
 * @param {string} commandReceived - Comando recibido del PLC
 * @param {string} waitForCommand - Comando configurado para esperar
 * @returns {boolean} Indica si el comando recibido es el esperado
 */
function isExpectedCommand(commandReceived, waitForCommand) {
  return commandReceived === waitForCommand || waitForCommand === 'any';
}

/**
 * Obtiene todas las conexiones activas del PLC
 * @returns {Map<number, net.Socket>} Mapa de conexiones activas
 */
function getActiveConnections() {
  return activeConnections;
}

module.exports = {
  startPlcServer,
  stopPlcServer,
  handleLastLabelCommand,
  handleRfidPrintCommand,
  isExpectedCommand,
  getActiveConnections
};
